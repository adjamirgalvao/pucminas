>> backend passos iniciais 
node init -- criar projeto
npm install axios -- para fazer chamada http no node, mas precisa ser a versão ^0.21.1
npm install body-parser -- para na aplicação node poder pegar os dados do formulario
npm install express -- para instalar o pacote que faz subir a aplicação node (servidor)
npm install express-session -- para instalar o pacote que faz controle de sessão
npm install -g nodemon  -- para instalar o nodemon para poder usar nos projetos
npm install nodemon --save-dev -- para instalar o nodemon no seu projeto

npm install cors   https://www.treinaweb.com.br/blog/o-que-e-cors-e-como-resolver-os-principais-erros
para resolver o problema de Access to XMLHttpRequest at 'http://localhost:8090/produtos/' from origin 'http://localhost:4200' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.



para fazer autenticacao
npm i passport passport-jwt jsonwebtoken   --para fazer a instação do passport e da extensao para jwt e jsonwebtoken para ter o token

para fazer hash de senha (sha256 is depreccated)
npm install sha.js

npm install google-auth-library -- autenticacao do token do google

npm i puppeteer -- para gerar pdf é um headless browser
>> frontend passos iniciais
ng new meuApp -- cria o projeto angular
ng serve --open roda o projeto e abre o browser
 >> tambem poderia ser npm start


>>> Adicionando o ngbootstrap ao projeto

npm install @ng-bootstrap/ng-bootstrap
ng add @ng-bootstrap/ng-bootstrap --adicionar o bootstrap no projeto da maneira mais simples


>> adicionando material da google

ng add @angular/material 


>> adicionando moment

npm i @angular/material-moment-adapter
ng g c componentes/cabecalho -- >> criando um componente para o angular js

npm install ng2-currency-mask --save  mascara de numero CurrencyMaskModule

 npm install --save ngx-mask    https://github.com/JsDaddy/ngx-mask mascara para cnpj cpf
 depois que instalei reclamou de vulnerabilidade e rodei npm audit fix
 
npm i bootstrap-icons  -- icones do boostrap
ai depois no styles.css tem que colocar

@import "~bootstrap-icons/font/bootstrap-icons.css";

npm install @abacritt/angularx-social-login -- frontend para autenticacao google, o é para angular mais antigo angularx-social-login -- 
depois reclamou de vulnerabilidade e fiz npm audit fix

tem que ir em https://console.developers.google.com/ e gerar GOOGLE_CLIENT_ID 
 1) redirecionou para https://developers.google.com/identity/gsi/web/guides/get-google-api-clientid?hl=pt-br
 2) criei um projeto
 3) configurei a tela de credencial com um usuario tipo externo
 4) depois entrei na opção de credenciais -> criar credenciais -> 'ID do cliente do OAuth'
 5) escolhi a opção de 'aplicativo da web'
 6) em 'Origens JavaScript autorizadas' coloquei http://localhost:4200 e http://localhost (sem a segunda não funciona)


---- gráficos
https://www.npmjs.com/package/ng2-charts?activeTab=readme
ng add ng2-charts
npm i chartjs-plugin-annotation

--- extensoes para o vscode
Auto Import ---> fazer import do typescript
Angular Language service


------ 

Dicas

----- ngClass para ligar ou desligar classe

@Component({
  selector: 'app-home',
  template: `
    <div>
      <h1 [ngClass]="{'color-blue': active}">
        Home!
      </h1>
      <button (click)="colorBlue()">
          Mudar cor
      </button>
    </div>
  `,
  styles: [
  ]
})
export class HomeComponent {
  active: boolean = true;

  constructor() { }

  colorBlue(){
    this.active = !this.active
  }
}

[ngClass]="{'text-danger': getPrecoFinalItemVenda_() <=0}" 


------ ngIf com else
Isso aí. O elemento que recebeu a diretiva, caso a condicional for verdadeira, irá incluir o elemento no template, caso contrário, ele poderá excluir o elemento ou incluir um elemento declarado usando o elemento do Angular <ng-template>.


============= mongodb
XsdDxedCvHNWjXZh

mongodb+srv://adjamirgalvao:XsdDxedCvHNWjXZh@cluster0.4jedpjg.mongodb.net/?retryWrites=true&w=majority

-- colocando a aplicação em produção
	adicionei a porta 3000 no https://console.developers.google.com/
 



no backend
	-- instalei o path no backend com https://community.umbler.com/br/t/hospedando-angularjs-na-umbler/455
		npm i path
   alterei o arquivo index.js para server.js e coloquei para rodar na porta 3000
   alterei o backend para apontar para a build gerada pelo angular
   adicionei no package.json
   	"postinstall": "npm run build",
	"build": "ng build --prod",
	
no frontend
   
    ng build
	// tem esse warning, mas não dei atenção https://stackoverflow.com/questions/72584084/warning-1-rules-skipped-due-to-selector-errors-legend-cannot-read-prope
	editei o angular.json para em budgets aumentar o tamanho do arquivo // https://stackoverflow.com/questions/68523451/angular-error-initial-exceeded-maximum-budget-budget-5-00-mb-was-not-met-by

	https://angular.io/guide/build#configuring-commonjs-dependencies
	criei o arquivo proxy.conf.json
	alterei o angular.json colocando o código abaixo em serv - builder para não ter que alterar o npm start escrevendo  'ng serve --proxy-config proxy.conf.json'
			  "options": {
		  "browserTarget": "Projeto:build",
		  "proxyConfig": "proxy.conf.json"
		},	
	
	ajuste os services para a url começar em /api e não em http://localhost:XXXX//api

	resolvi o warning de commmon dependences alterando o angular.json
	Warning: C:\Adjamir\pucminas\projeto\frontend\node_modules\@angular\material-moment-adapter\fesm2020\material-moment-adapter.mjs depends on 'moment'. CommonJS or AMD dependencies can cause optimization bailouts.
		
	"allowedCommonJsDependencies": [
			"moment"
     ]	