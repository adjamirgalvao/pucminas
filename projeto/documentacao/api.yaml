openapi: 3.0.3
info:
  title: API do Sistema Para Controle de Lojas/Comércios de Pequeno Porte.
  description: |-
    API para lojas/comércios de pequeno porte. Ela faz o controle de produtos, vendedores, clientes, usuários, compras e vendas. Além disso, fornece informações para gestão da empresa.
    
    Esta API foi criada via Swagger com base na especificação OpenAPI 3.0. 

    Links úteis:
    - [Repositório do projeto](https://github.com/adjamirgalvao/pucminas)
    - [Definição da API para a Loja On-line](https://github.com/adjamirgalvao/pucminas/blob/master/projeto/documentacao/api.yaml)
    
    Observações:
    - As rotinas que retornam pdf ou excel apresentam um problema na visualização da resposta pelo Swagger. Existe uma [issue](https://github.com/swagger-api/swagger-ui/issues/5500) no Swagger cadastrada para este problema. 
  contact:
    name: desenvolvedor
    email: adjamir@gmail.com
  version: 1.0.0
externalDocs:
  description: Saiba mais sobre o projeto.
  url: https://github.com/adjamirgalvao/pucminas/tree/master/projeto/documentacao
servers:
  - url: https://adjamir2318.c41.integrator.host/mock/api
    description: Mock da API
tags:
  - name: Usuários
    description: API relativa a funcionalidade de usuários  
  - name: Fornecedores
    description: API relativa a funcionalidade de fornecedores
  - name: Produtos
    description: API relativa a funcionalidade de produtos
  - name: Vendedores
    description: API relativa a funcionalidade de vendedores     
  - name: Clientes
    description: API relativa a funcionalidade de clientes  
  - name: Compras
    description: API relativa a funcionalidade de compras  
paths:
  /usuarios/{id}:            
    parameters:
      - name: id
        in: path
        description: Id do usuário
        required: true
        schema:
          type: string
    get:
      tags:
        - Usuários
      summary: Consulta um usuário pelo id
      operationId: getUsuario
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Usuário não encontrado
      security:
        - api_key:
            - write:usuarios
            - read:usuarios               
    put:
      tags:
        - Usuários
      summary: Atualiza o usuário informado pelo id
      operationId: updateUsuario
      requestBody:
        description: Dados do usuário para ser atualizado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: Operação com sucesso
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Usuário não encontrado
      security:
        - api_key:
            - write:usuarios
            - read:usuarios
    delete:
      tags:
        - Usuários
      summary: Exclui um usuário pelo id
      operationId: deleteUsuario
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Usuário não encontrado
      security:
        - api_key:
            - write:usuarios
            - read:usuarios    
  /fornecedores:
    get:
      tags:
        - Fornecedores
      summary: Retorna a lista de todos os fornecedores
      operationId: gettAllFornecedores
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fornecedor'         
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:fornecedor
            - read:fornecedor  
    post:
      tags:
        - Fornecedores
      summary: Adiciona um novo fornecedor
      operationId: addFornecedor
      requestBody:
        description: Dados do fornecedor para ser criado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fornecedor'
        required: true
      responses:
        '200':
          description: Atualização com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fornecedor'          
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:fornecedor
            - read:fornecedor
  /fornecedores/{id}: 
    parameters:
      - name: id
        in: path
        description: Id do fornecedor
        required: true
        schema:
          type: string
    get:
      tags:
        - Fornecedores
      summary: Consulta um fornecedor pelo id
      operationId: getFornecedor

      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fornecedor'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Fornecedor não encontrado
      security:
        - api_key:
            - write:fornecedores
            - read:fornecedores     
    put:
      tags:
        - Fornecedores
      summary: Atualiza o fornecedor informado pelo id
      operationId: updateFornecedor
      requestBody:
        description: Dados do fornecedor para ser atualizado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fornecedor'
      responses:
        '200':
          description: Operação com sucesso
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Fornecedor não encontrado
      security:
        - api_key:
            - write:fornecedores
            - read:fornecedores
    delete:
      tags:
        - Fornecedores
      summary: Exclui um fornecedor pelo id
      operationId: deleteFornecedor
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fornecedor'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Fornecedor não encontrado
      security:
        - api_key:
            - write:fornecedores
            - read:fornecedores   
  /fornecedores/relatorios/listagem:
    get:
      tags:
        - Fornecedores
      summary: Recupera PDF com a lista de fornecedores
      operationId: getRelatorioListagemFornecedores
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/pdf:
              schema:
                type: string
                format: binary      
          headers:
            Content-Disposition:
              schema:
                type: string
                format: string             
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:fornecedor
            - read:fornecedor  
  /fornecedores/exportar/listagem:
    get:
      tags:
        - Fornecedores
      summary: Recupera planilha Excel com a lista de fornecedores
      operationId: getExportarListagemFornecedores
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary      
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:fornecedor
            - read:fornecedor  
  /produtos:
    get:
      tags:
        - Produtos
      summary: Retorna a lista de todos os produtos
      operationId: gettAllProdutos
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Produto'         
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:produto
            - read:produto  
    post:
      tags:
        - Produtos
      summary: Adiciona um novo produto
      operationId: addProduto
      requestBody:
        description: Dados do produto para ser criado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Produto'
        required: true
      responses:
        '200':
          description: Atualização com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'          
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:produto
            - read:produto
  /produtos/{id}: 
    parameters:
      - name: id
        in: path
        description: Id do produto para excluir
        required: true
        schema:
          type: string
    get:
      tags:
        - Produtos
      summary: Consulta um produto pelo id
      operationId: getProduto
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Fornecedor não encontrado
      security:
        - api_key:
            - write:produtos
            - read:produtos     
    put:
      tags:
        - Produtos
      summary: Atualiza o produto informado pelo id
      operationId: updateProduto
      requestBody:
        description: Dados do produto para ser atualizado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Produto'
      responses:
        '200':
          description: Operação com sucesso
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Fornecedor não encontrado
      security:
        - api_key:
            - write:produtos
            - read:produtos
    delete:
      tags:
        - Produtos
      summary: Exclui um produto pelo id
      operationId: deleteProduto
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Fornecedor não encontrado
      security:
        - api_key:
            - write:produtos
            - read:produtos   
  /produtos/{id}/listarItensCompras: 
    parameters:
      - name: id
        in: path
        description: Id do produto consultar
        required: true
        schema:
          type: string
    get:
      tags:
        - Produtos
      summary: Consulta os itens de compra que contem o produto
      operationId: getItensComprasProduto
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                allOf: 
                  - $ref: '#/components/schemas/ItemCompra'
                  - type: object
                    properties:
                      compra:
                        $ref: '#/components/schemas/Compra'
                    required: 
                      - compra

        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Fornecedor não encontrado
      security:
        - api_key:
            - write:produtos
            - read:produtos                
  /produtos/relatorios/listagem:
    get:
      tags:
        - Produtos
      summary: Recupera PDF com a lista de produtos
      operationId: getRelatorioListagemProdutos
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/pdf:
              schema:
                type: string
                format: binary      
          headers:
            Content-Disposition:
              schema:
                type: string
                format: string             
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:produto
            - read:produto  
  /produtos/exportar/listagem:
    get:
      tags:
        - Produtos
      summary: Recupera planilha Excel com a lista de produtos
      operationId: getExportarListagemProdutos
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary      
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:produto
            - read:produto              
  /vendedores:
    get:
      tags:
        - Vendedores
      summary: Retorna a lista de todos os vendedores
      operationId: gettAllVendedores
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendedor'         
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:vendedor
            - read:vendedor  
    post:
      tags:
        - Vendedores
      summary: Adiciona um novo vendedor
      operationId: addVendedor
      requestBody:
        description: Dados do vendedor para ser criado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vendedor'
        required: true
      responses:
        '200':
          description: Atualização com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendedor'          
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:vendedor
            - read:vendedor
  /vendedores/{id}:            
    parameters:
      - name: id
        in: path
        description: Id do vendedor
        required: true
        schema:
          type: string
    get:
      tags:
        - Vendedores
      summary: Consulta um vendedor pelo id
      operationId: getVendedor
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendedor'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Vendedor não encontrado
        '500':
          description: Foi fornecido um ID inválido
      security:
        - api_key:
            - write:vendedores
            - read:vendedores   
    put:
      tags:
        - Vendedores
      summary: Atualiza o vendedor informado pelo id
      operationId: updateVendedor
      requestBody:
        description: Dados do vendedor para ser atualizado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vendedor'
      responses:
        '200':
          description: Operação com sucesso
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Vendedor não encontrado
      security:
        - api_key:
            - write:vendedores
            - read:vendedores
    delete:
      tags:
        - Vendedores
      summary: Exclui um vendedor pelo id
      operationId: deleteVendedor
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendedor'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Vendedor não encontrado
        '500':
          description: Foi fornecido um ID inválido
      security:
        - api_key:
            - write:vendedores
            - read:vendedores   
  /vendedores/relatorios/listagem:
    get:
      tags:
        - Vendedores
      summary: Recupera PDF com a lista de vendedores
      operationId: getRelatorioListagemVendedores
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/pdf:
              schema:
                type: string
                format: binary      
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:vendedor
            - read:vendedor  
  /vendedores/exportar/listagem:
    get:
      tags:
        - Vendedores
      summary: Recupera planilha Excel com a lista de vendedores
      operationId: getExportarListagemVendedores
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary      
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:vendedor
            - read:vendedor   
  /usuarios:
    get:
      tags:
        - Usuários
      summary: Retorna a lista de todos os usuários
      operationId: gettAllUsuarios
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'         
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:usuario
            - read:usuario  
    post:
      tags:
        - Usuários
      summary: Adiciona um novo usuário
      operationId: addUsuario
      requestBody:
        description: Dados do usuário para ser criado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
        required: true
      responses:
        '200':
          description: Atualização com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'          
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:usuario
            - read:usuario
  /clientes:
    get:
      tags:
        - Clientes
      summary: Retorna a lista de todos os clientes
      operationId: gettAllClientes
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cliente'         
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:cliente
            - read:cliente  
    post:
      tags:
        - Clientes
      summary: Adiciona um novo cliente
      operationId: addCliente
      requestBody:
        description: Dados do cliente para ser criado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cliente'
        required: true
      responses:
        '200':
          description: Atualização com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'          
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:cliente
            - read:cliente
  /clientes/{id}:  
    get:
      tags:
        - Clientes
      summary: Consulta um cliente pelo id
      operationId: getCliente
      parameters:
        - name: id
          in: path
          description: Id do cliente para excluir
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Cliente não encontrado
      security:
        - api_key:
            - write:clientes
            - read:clientes   
    put:
      tags:
        - Clientes
      summary: Atualiza o cliente informado pelo id
      operationId: updateCliente
      parameters:
        - name: id
          in: path
          description: Id do cliente para atualizar
          required: true
          schema:
            type: string
      requestBody:
        description: Dados do cliente para ser atualizado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cliente'
      responses:
        '200':
          description: Operação com sucesso
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Cliente não encontrado
      security:
        - api_key:
            - write:clientes
            - read:clientes
    delete:
      tags:
        - Clientes
      summary: Exclui um cliente pelo id
      operationId: deleteCliente
      parameters:
        - name: id
          in: path
          description: Id do cliente para excluir
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Cliente não encontrado
      security:
        - api_key:
            - write:clientes
            - read:clientes   
  /clientes/relatorios/listagem:
    get:
      tags:
        - Clientes
      summary: Recupera PDF com a lista de clientes
      operationId: getRelatorioListagemClientes
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/pdf:
              schema:
                type: string
                format: binary      
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:cliente
            - read:cliente  
  /clientes/exportar/listagem:
    get:
      tags:
        - Clientes
      summary: Recupera planilha Excel com a lista de clientes
      operationId: getExportarListagemClientes
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary      
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:cliente
            - read:cliente  
  /compras:
    get:
      tags:
        - Compras
      summary: Retorna a lista de todas as compras
      operationId: gettAllCompras
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                    allOf: 
                      - $ref: '#/components/schemas/Compra'
                      - type: object
                        properties:
                          fornecedor:
                            $ref: '#/components/schemas/Fornecedor'
                      - type: object
                        properties:
                          itensCompra:
                            type: array
                            items:
                              $ref: '#/components/schemas/ItemCompra'
                        required: 
                          - fornecedor  
                          - itensCompra
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:compra
            - read:compra  
    post:
      tags:
        - Compras
      summary: Adiciona uma nova compra
      operationId: addCompra
      requestBody:
        description: Dados da compra para ser criado
        content:
          application/json:
            schema:
                allOf: 
                  - $ref: '#/components/schemas/Compra'
                  - type: object
                    properties:
                      itensCompra:
                        type: array
                        items:
                          $ref: '#/components/schemas/ItemCompra'
                    required: 
                        - itensCompra
        required: true
      responses:
        '200':
          description: Atualização com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compra'          
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
      security:
        - api_key:
            - write:compra
            - read:compra
  /compras/{id}:  
    get:
      tags:
        - Compras
      summary: Consulta uma compra pelo id
      operationId: getCompra
      parameters:
        - name: id
          in: path
          description: Id da compra para excluir
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                  allOf: 
                    - $ref: '#/components/schemas/Compra'
                    - type: object
                      properties:
                        fornecedor:
                          $ref: '#/components/schemas/Fornecedor'
                    - type: object
                      properties:
                        itensCompra:
                          type: array
                          items:
                            $ref: '#/components/schemas/ItemCompra'
                      required: 
                        - fornecedor  
                        - itensCompra      
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Compra não encontrada
      security:
        - api_key:
            - write:compras
            - read:compras   
    delete:
      tags:
        - Compras
      summary: Exclui uma compra pelo id
      operationId: deleteCompra
      parameters:
        - name: id
          in: path
          description: Id da compra para excluir
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operação com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compra'           
        '400':
          description: Foi fornecido um ID inválido
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado ao usuário
        '404':
          description: Compra não encontrada
      security:
        - api_key:
            - write:compras
            - read:compras   
  /compras/relatorios/listagem:
    get:
      tags:
        - Compras
      summary: Recupera PDF com a lista de compras
      operationId: getRelatorioListagemCompras
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/pdf:
              schema:
                type: string
                format: binary      
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:compra
            - read:compra  
  /compras/exportar/listagem:
    get:
      tags:
        - Compras
      summary: Recupera planilha Excel com a lista de compras
      operationId: getExportarListagemCompras
      responses:
        '200':
          description: Consulta com sucesso
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary      
        '401':
          description: Usuário não está logado
        '403':
          description: Acesso negado
      security:
        - api_key:
            - write:compra
            - read:compra                  
components:
  schemas:
    Fornecedor:
      required:
        - _id
        - nome
        - tipo
        - identificacao
        - endereco
      type: object
      properties:
        _id:
          type: string
          description: Id do fornecedor
          example: "63df180478fa75fe3c95ed48"
          readOnly: true
        nome:
          type: string
          description: Nome do fornecedor
          example: "Lojão do Condomínio"
        tipo:
          type: string
          description: Tipo do fornecedor
          enum:
            - pf
            - pj
          example: "pf"
        identificacao:
          type: string
          description: CPF/CNPJ do Fornecedor
          example: "39629415500" 
        endereco:
          type: object
          properties:
            rua:
              type: string
              example: "Rua dos pedestres"
            numero:
              type: string
              example: "S/N"
            complemento:
              type: string
              example: "Apto 1000"
          required:
            - rua
            - numero          
    Cliente:
      required:
        - _id
        - nome
        - email
        - cpf
        - dataNascimento
        - endereco
      type: object
      properties:
        _id:
          type: string
          description: Id do cliente
          example: "63cf180478fa75fe3c95ed47"
          readOnly: true
        nome:
          type: string
          description: Nome do cliente
          example: "José da Silva Santos"
        email:
          type: string
          description: E-Mail do cliente
          example: "josesilva@gmail.com"
        cpf:
          type: string
          description: CPF do cliente
          example: "39629415500" 
        dataNascimento:
          type: string
          format: date
          description: Data de nascimento do cliente
          example: "26/04/2000" 
        endereco:
          type: object
          properties:
            rua:
              type: string
              example: "Rua dos poucos números"
            numero:
              type: string
              example: "S/N"
            complemento:
              type: string
              example: "0"
          required:
            - rua
            - numero    
    Vendedor:
      required:
        - _id
        - nome
        - email
        - cpf
        - salario
        - endereco
      type: object
      properties:
        _id:
          type: string
          description: Id do vendedor
          example: "63cf180478fa75fe3c95ed46"
          readOnly: true
        nome:
          type: string
          description: Nome do vendedor
          example: "Antôno dos Santos"
        email:
          type: string
          description: E-Mail do vendedor
          example: "antonio@gmail.com"
        cpf:
          type: string
          description: CPF do vendedor
          example: "39629415501" 
        salario:
          type: number
          description: Salário do vendedor
          example: 5000 
        endereco:
          type: object
          properties:
            rua:
              type: string
              example: "Rua dos vendedores"
            numero:
              type: string
              example: "S/N"
            complemento:
              type: string
              example: "0"
          required:
            - rua
            - numero    
    Usuario:
      required:
        - _id
        - nome
        - login
        - senha
        - email
        - roles
      type: object
      properties:
        _id:
          type: string
          description: Id do usuário
          example: "63cf180478fa75fe3c95ed46"
          readOnly: true
        nome:
          type: string
          description: Nome do usuário
          example: "Paulo da Silva"
        login:
          type: string
          description: Login do usuário
          example: "paulo"
        senha:
          type: string
          description: Senha do usuário
          example: "1234" 
        email:
          type: string
          description: E-Mail do usuário
          example: "paulo@gmail.com"
        roles:
          type: array
          description: Perfis do usuário
          example: ["ADMIN", "CLIENTE"]
          items:
            type: string
            enum: [ADMIN, GESTOR, CLIENTE, ESTOQUE, VENDENDOR]
    Produto:
      required:
        - _id
        - nome
        - quantidade
        - preco
        - precoCusto
        - precoCustoInicial
      type: object
      properties:
        _id:
          type: string
          description: Id do produto
          example: "63cf180478fa75fe3c95ed46"
          readOnly: true
        nome:
          type: string
          description: Nome do produto
          example: "Vara de pescar"
        preco:
          type: number
          description: Preço unitário do produto
          example: 20
        precoCusto:
          type: number
          description: Preço de custo do produto
          example: 5
        precoCustoInicial:
          type: number
          description: Preço de custo inicíal do produto
          example: 5
          readOnly: true
    Compra:
      required:
        - _id
        - data
      type: object
      properties:
        _id:
          type: string
          description: Id da compra
          example: "63cf180478fa75fe3c95gd47"
          readOnly: true
        numero:
          type: string
          description: Número da nota fiscal da compra
          example: "ZYZ 672"
        data:
          type: string
          format: date
          description: Data da compra
          example: "13/12/2022" 
        id_fornecedor:
          type: string
          description: Id do fornecedor da compra
          example: "63cf180478fa75fg3c95gd47"          
    ItemCompra:
      required:
        - _id
        - id_produto
        - id_compra
        - quantidade
        - preco
      type: object
      properties:
        _id:
          type: string
          description: Id do item da compra
          example: "63cf180478fa75fe3c95gd47"
          readOnly: true
        id_produto:
          type: string
          description: Id do produto da compra
          example: "63cd180478fa75fe3c95gd47"
        id_compra:
          type: string
          description: Id da compra
          example: "63cd180478fb75fe3c95gd47"
        quantidade:
          type: number
          description: Quantidade de itens comprados
          example: 10 
        preco:
          type: number
          description: Preço pago pelo total de itens comprados
          example: 100
  securitySchemes:
    api_key:
      type: http
      scheme: bearer    